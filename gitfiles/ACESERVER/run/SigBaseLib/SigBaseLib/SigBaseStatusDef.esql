BROKER SCHEMA SigBaseLib


/**
 * SigBaseStatusDef.esql
 *
 * Declare standard status values and codes.
 */

-- BEGIN OF STATUS --

DECLARE ACCEPTED_STATUS EXTERNAL CHARACTER 'ACCEPTED';

CREATE PROCEDURE getAcceptedStatus() RETURNS CHARACTER
BEGIN
    RETURN ACCEPTED_STATUS;
END;

DECLARE ERROR_STATUS EXTERNAL CHARACTER 'ERROR';

CREATE PROCEDURE getErrorStatus() RETURNS CHARACTER
BEGIN
    RETURN ERROR_STATUS;
END;

DECLARE WARN_STATUS EXTERNAL CHARACTER 'WARN';

CREATE PROCEDURE getWarnStatus() RETURNS CHARACTER
BEGIN
    RETURN WARN_STATUS;
END;

DECLARE PROCESSED_STATUS EXTERNAL CHARACTER 'PROCESSED';

CREATE PROCEDURE getProcesssedStatus() RETURNS CHARACTER
BEGIN
    RETURN PROCESSED_STATUS;
END;

DECLARE PUBLISHED_STATUS EXTERNAL CHARACTER 'PUBLISHED';

CREATE PROCEDURE getPublishedStatus() RETURNS CHARACTER
BEGIN
    RETURN PUBLISHED_STATUS;
END;

DECLARE REJECTED_STATUS EXTERNAL CHARACTER 'REJECTED';

CREATE PROCEDURE getRejectedStatus() RETURNS CHARACTER
BEGIN
    RETURN REJECTED_STATUS;
END;

DECLARE UNSUPPORTED_STATUS EXTERNAL CHARACTER 'UNSUPPORTED';

CREATE PROCEDURE getUnsupportedStatus() RETURNS CHARACTER
BEGIN
    RETURN UNSUPPORTED_STATUS;
END;

DECLARE SUCCESS_STATUS EXTERNAL CHARACTER 'SUCCESS';

CREATE PROCEDURE getSupportedStatus() RETURNS CHARACTER
BEGIN
    RETURN SUCCESS_STATUS;
END;

-- END OF STATUS --

-- BEGIN OF STATUS/MESSAGES --

DECLARE OK_STATUS_CODE EXTERNAL CHARACTER '200';
DECLARE OK_MESSAGE EXTERNAL CHARACTER 'OK';

CREATE PROCEDURE getOkStatusCode() RETURNS CHARACTER
BEGIN
    RETURN OK_STATUS_CODE;
END;

CREATE PROCEDURE getOkStatusMessage() RETURNS CHARACTER
BEGIN
    RETURN OK_MESSAGE;
END;

DECLARE NO_CONTENT_CODE EXTERNAL CHARACTER '204';
DECLARE NO_CONTENT_MESSAGE EXTERNAL CHARACTER 'No Content';

CREATE PROCEDURE getNoContentCode() RETURNS CHARACTER
BEGIN
    RETURN NO_CONTENT_CODE;
END;

CREATE PROCEDURE getNoContentMessage() RETURNS CHARACTER
BEGIN
    RETURN NO_CONTENT_MESSAGE;
END;

DECLARE BAD_REQUEST_STATUS_CODE EXTERNAL CHARACTER '400';
DECLARE BAD_REQUEST_MESSAGE EXTERNAL CHARACTER 'Bad Request';

CREATE PROCEDURE getBadRequestStatusCode() RETURNS CHARACTER
BEGIN
    RETURN BAD_REQUEST_STATUS_CODE;
END;

CREATE PROCEDURE getBadRequestMessage() RETURNS CHARACTER
BEGIN
    RETURN BAD_REQUEST_MESSAGE;
END;

DECLARE UNAUTHORIZED_STATUS_CODE EXTERNAL CHARACTER '401';
DECLARE UNAUTHORIZED_MESSAGE EXTERNAL CHARACTER 'Unauthorized';

CREATE PROCEDURE getUnauthorizedCode() RETURNS CHARACTER
BEGIN
    RETURN UNAUTHORIZED_STATUS_CODE;
END;

CREATE PROCEDURE getUnauthorizedMessage() RETURNS CHARACTER
BEGIN
    RETURN UNAUTHORIZED_MESSAGE;
END;

DECLARE NOT_FOUND_STATUS_CODE EXTERNAL CHARACTER '404';
DECLARE NOT_FOUND_MESSAGE EXTERNAL CHARACTER 'Not Found'; 

CREATE PROCEDURE getNotFoundStatusCode() RETURNS CHARACTER
BEGIN
    RETURN NOT_FOUND_STATUS_CODE;
END;
CREATE PROCEDURE getNotFoundMessage() RETURNS CHARACTER
BEGIN
    RETURN NOT_FOUND_MESSAGE;
END;

DECLARE METHOD_NOT_ALLOWED_STATUS_CODE EXTERNAL CHARACTER '405';
DECLARE METHOD_NOT_ALLOWED_MESSAGE EXTERNAL CHARACTER 'Method Not Allowed';

CREATE PROCEDURE getMethodNotAllowedStatusCode() RETURNS CHARACTER
BEGIN
    RETURN METHOD_NOT_ALLOWED_STATUS_CODE;
END;
CREATE PROCEDURE getMethodNotAllowedMessage() RETURNS CHARACTER
BEGIN
    RETURN METHOD_NOT_ALLOWED_MESSAGE;
END;

DECLARE PROXY_AUTH_REQUIRED_STATUS_CODE EXTERNAL CHARACTER '407';
DECLARE PROXY_AUTH_REQUIRED_MESSAGE EXTERNAL CHARACTER 'Proxy Authentication Required';

CREATE PROCEDURE getProxyAuthRequiredStatusCode() RETURNS CHARACTER
BEGIN
    RETURN PROXY_AUTH_REQUIRED_STATUS_CODE;
END;

CREATE PROCEDURE getProxyAuthRequiredMessage() RETURNS CHARACTER
BEGIN
    RETURN PROXY_AUTH_REQUIRED_MESSAGE;
END;

DECLARE REQUEST_TIMEOUT_STATUS_CODE EXTERNAL CHARACTER '408';
DECLARE REQUEST_TIMEOUT_STATUS_MESSAGE EXTERNAL CHARACTER 'Request Timeout';

CREATE PROCEDURE getRequestTimeoutStatusCode() RETURNS CHARACTER
BEGIN
    RETURN REQUEST_TIMEOUT_STATUS_CODE;
END;

CREATE PROCEDURE getRequestTimeoutStatusMessage() RETURNS CHARACTER
BEGIN
    RETURN REQUEST_TIMEOUT_STATUS_MESSAGE;
END;

DECLARE INVALID_REQUEST_CODE EXTERNAL CHARACTER '454';
DECLARE INVALID_REQUEST_MESSAGE EXTERNAL CHARACTER 'Invalid Request Received';

CREATE PROCEDURE getInvalidRequestCode() RETURNS CHARACTER
BEGIN
    RETURN INVALID_REQUEST_CODE;
END;

CREATE PROCEDURE getInvalidRequestMessage() RETURNS CHARACTER
BEGIN
    RETURN INVALID_REQUEST_MESSAGE;
END;

DECLARE UNSUPPORTED_SCHEMA_CODE EXTERNAL CHARACTER '455';
DECLARE UNSUPPORTED_SCHEMA_MESSAGE EXTERNAL CHARACTER 'Request Contains Unsupported Schema';

CREATE PROCEDURE getUnsupportedSchemaCode() RETURNS CHARACTER
BEGIN
    RETURN UNSUPPORTED_SCHEMA_CODE;
END;

CREATE PROCEDURE getUnsupportedSchemaMessage() RETURNS CHARACTER
BEGIN
    RETURN UNSUPPORTED_SCHEMA_MESSAGE;
END;


DECLARE UNSUPPORTED_REQUEST_DATA_CODE EXTERNAL CHARACTER '459';
DECLARE UNSUPPORTED_REQUEST_DATA_MESSAGE EXTERNAL CHARACTER 'Unsupported Request Data';

CREATE PROCEDURE getUnsupportedRequestDataCode() RETURNS CHARACTER
BEGIN
    RETURN UNSUPPORTED_REQUEST_DATA_CODE;
END;

CREATE PROCEDURE getUnsupportedRequestDataMessage() RETURNS CHARACTER
BEGIN
    RETURN UNSUPPORTED_REQUEST_DATA_MESSAGE;
END;


DECLARE INVALID_CONFIGURATION_FILE_CODE EXTERNAL CHARACTER '461';
DECLARE INVALID_CONFIGURATION_FILE_MESSAGE EXTERNAL CHARACTER 'Invalid Configuration File';

CREATE PROCEDURE getInvalidConfigurationFileCode() RETURNS CHARACTER
BEGIN
    RETURN INVALID_CONFIGURATION_FILE_CODE;
END;

CREATE PROCEDURE getInvalidConfigurationFileMessage() RETURNS CHARACTER
BEGIN
    RETURN INVALID_CONFIGURATION_FILE_MESSAGE;
END;

DECLARE INTERNAL_SERVER_ERROR_STATUS_CODE EXTERNAL CHARACTER '500';
DECLARE INTERNAL_SERVER_ERROR_MESSAGE EXTERNAL CHARACTER 'Internal Server Error';

CREATE PROCEDURE getInternalServerErrorStatusCode() RETURNS CHARACTER
BEGIN
    RETURN INTERNAL_SERVER_ERROR_STATUS_CODE;
END;

CREATE PROCEDURE getInternalServerErrorMessage() RETURNS CHARACTER
BEGIN
    RETURN INTERNAL_SERVER_ERROR_MESSAGE;
END;

DECLARE SERVICE_UNAVAILABLE_STATUS_CODE EXTERNAL CHARACTER '503';
DECLARE SERVICE_UNAVAILABLE_MESSAGE EXTERNAL CHARACTER 'Service Unavailable';

CREATE PROCEDURE getServiceUnavailableStatusCode() RETURNS CHARACTER
BEGIN
    RETURN SERVICE_UNAVAILABLE_STATUS_CODE;
END;

CREATE PROCEDURE getServiceUnavailableMessage() RETURNS CHARACTER
BEGIN
    RETURN SERVICE_UNAVAILABLE_MESSAGE;
END;

DECLARE TLOG_PARSE_ERROR_STATUS_CODE EXTERNAL CHARACTER '551';
DECLARE TLOG_PARSE_ERROR_MESSAGE EXTERNAL CHARACTER 'TLOG Parse Error';

CREATE PROCEDURE getTlogParseErrorStatusCode() RETURNS CHARACTER
BEGIN
    RETURN TLOG_PARSE_ERROR_STATUS_CODE;
END;

CREATE PROCEDURE getTlogParseErrorMessage() RETURNS CHARACTER
BEGIN
    RETURN TLOG_PARSE_ERROR_MESSAGE;
END;

DECLARE ERROR_UPDATING_DATABASE_CODE EXTERNAL CHARACTER '552';
DECLARE ERROR_UPDATING_DATABASE_MESSAGE EXTERNAL CHARACTER 'Error Updating Database';

CREATE PROCEDURE getErrorUpdatingDatabaseCode() RETURNS CHARACTER
BEGIN
    RETURN ERROR_UPDATING_DATABASE_CODE;
END;

CREATE PROCEDURE getErrorUpdatingDatabaseMessage() RETURNS CHARACTER
BEGIN
    RETURN ERROR_UPDATING_DATABASE_MESSAGE;
END;

DECLARE SOAP_FAULT_CODE EXTERNAL CHARACTER '553';
DECLARE SOAP_FAULT_MESSAGE EXTERNAL CHARACTER 'Soap Fault';

CREATE PROCEDURE getSoapFaultCode() RETURNS CHARACTER
BEGIN
    RETURN SOAP_FAULT_CODE;
END;

CREATE PROCEDURE getSoapFaultMessage() RETURNS CHARACTER
BEGIN
    RETURN SOAP_FAULT_MESSAGE;
END;

DECLARE INVALID_RESPONSE_CODE EXTERNAL CHARACTER '554';
DECLARE INVALID_RESPONSE_MESSAGE EXTERNAL CHARACTER 'Invalid Response';

CREATE PROCEDURE getInvalidResponseCode() RETURNS CHARACTER
BEGIN
    RETURN INVALID_RESPONSE_CODE;
END;

CREATE PROCEDURE getInvalidResponseMessage() RETURNS CHARACTER
BEGIN
    RETURN INVALID_RESPONSE_MESSAGE;
END;

DECLARE DISCARDED_EVENT_STATUS_CODE EXTERNAL CHARACTER '600';
DECLARE DISCARDED_EVENT_MESSAGE EXTERNAL CHARACTER 'Discarded Event';

CREATE PROCEDURE getDiscardedEventStatusCode() RETURNS CHARACTER
BEGIN
    RETURN DISCARDED_EVENT_STATUS_CODE;
END;

CREATE PROCEDURE getDiscardedEventMessage() RETURNS CHARACTER
BEGIN
    RETURN DISCARDED_EVENT_MESSAGE;
END;

DECLARE CONTROLLER_EVENT_IGNORED_STATUS_CODE EXTERNAL CHARACTER '601';
DECLARE CONTROLLER_EVENT_IGNORED_MESSAGE EXTERNAL CHARACTER 'Controller Event Ignored';

CREATE PROCEDURE getControllerEventIgnoredStatusCode() RETURNS CHARACTER
BEGIN
    RETURN CONTROLLER_EVENT_IGNORED_STATUS_CODE;
END;

CREATE PROCEDURE getControllerEventIgnoredMessage() RETURNS CHARACTER
BEGIN
    RETURN CONTROLLER_EVENT_IGNORED_MESSAGE;
END;

DECLARE NO_SUBSCRIPTION_MATCH_STATUS_CODE EXTERNAL CHARACTER '602';
DECLARE NO_SUBSCRIPTION_MATCH_MESSAGE EXTERNAL CHARACTER 'No Subscription Match';

CREATE PROCEDURE getNoSubsriptionMatchStatusCode() RETURNS CHARACTER
BEGIN
    RETURN NO_SUBSCRIPTION_MATCH_STATUS_CODE;
END;
CREATE PROCEDURE getNoSubsriptionMatchMessage() RETURNS CHARACTER
BEGIN
    RETURN NO_SUBSCRIPTION_MATCH_MESSAGE;
END;

-- END OF STATUS/MESSAGES --