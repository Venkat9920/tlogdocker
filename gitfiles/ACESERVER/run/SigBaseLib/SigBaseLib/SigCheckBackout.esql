BROKER SCHEMA SigBaseLib

CREATE COMPUTE MODULE SigCheckBackout_CheckBackout
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		DECLARE nBackoutCount INTEGER 0;
		DECLARE nMaxBackoutCount INTEGER getEnvMaxBackoutCount(InputLocalEnvironment);
		DECLARE bMaxBackoutCountEnabled BOOLEAN getEnvMaxBackoutCountEnabled(InputLocalEnvironment);
		DECLARE sCorrelationId CHARACTER getEnvCorrelationId(InputLocalEnvironment);
		DECLARE sSource CHARACTER getEnvSource(InputLocalEnvironment);
		
		CALL CopyMessageHeaders();
		CALL CopyEntireMessage();
		
		SET OutputLocalEnvironment = InputLocalEnvironment;
		
		SET nBackoutCount = InputRoot.MQMD.BackoutCount;
		
		CALL setEnvBackoutCount(OutputLocalEnvironment, nBackoutCount);
		
		IF nBackoutCount > 0
		THEN
			CALL logWarn(MessageFlowLabel, NodeLabel, 
						'ID=' || formatString(sCorrelationId) || 
						' BackoutCount=' || CAST(nBackoutCount AS CHARACTER) || 
						' MaxBackoutCount=' || CAST(nMaxBackoutCount AS CHARACTER) || 
						' MaxBackoutCountEnabled=' || CAST(bMaxBackoutCountEnabled AS CHARACTER) || '.');

			IF nMaxBackoutCount > 0
			THEN
				IF nBackoutCount > nMaxBackoutCount
				THEN
					DECLARE sError CHARACTER;
					
					SET sError = getBackoutCountExceededMessage(MessageFlowLabel,
													     		sCorrelationId,
													     		sSource,
														 		nBackoutCount,
														 		nMaxBackoutCount);

					IF bMaxBackoutCountEnabled = TRUE
					THEN
						CALL logWarn(MessageFlowLabel, NodeLabel,
									 'Throwing the following exception to STOP the message flow: ' || sError);
					
						-- The backout count has been exceeded. THROW an exception
						-- that will be caught, logged, and cause the flow to shut
						-- down. The message will also be logged to the broker user.log,
						-- managed by syslogd, which will be picked up by Tivoli
						-- monitoring (log scraping).

						-- Note: 2951 allows for up to 10 message strings to be supplied.
					
						THROW USER EXCEPTION MESSAGE 2951 VALUES(sError) ;
					END IF;
				END IF;
			END IF;
		END IF;
		
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;
