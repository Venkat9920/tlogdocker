BROKER SCHEMA SigBaseLib

/**
 * SigBaseStdDef.esql
 *
 * General purpose global declarations used by all ESQL modules. 
 *
 * These declarations are considered reusable across services
 * and not specific to a given service (i.e. SigService).
 *
 * The declarations are centralized here so that the individual 
 * sources are not littered with them and to enforce uniformity
 * in the names used throughout all of the ESQL routines.
 */

/**
 * Declare standard static values.
 */

-- UTF-8 Character Set.
 
DECLARE UTF8_CCSID EXTERNAL INTEGER 1208;

-- Unknown HOST.

DECLARE UNKNOWN_HOST EXTERNAL CHARACTER 'unknown';

/**
 * Declare content types.
 */
 
DECLARE XML_CONTENT_TYPE EXTERNAL CHARACTER 'application/xml';
DECLARE XML_TEXT_CONTENT_TYPE EXTERNAL CHARACTER 'text/xml';
DECLARE TEXT_CONTENT_TYPE EXTERNAL CHARACTER 'text/plain';
DECLARE HTML_CONTENT_TYPE EXTERNAL CHARACTER 'text/html';
DECLARE APPLICATION_FORM_URLENCODED_CONTENT_TYPE EXTERNAL CHARACTER 'application/x-www-form-urlencoded';
DECLARE APPLICATION_OCTET_STREAM_CONTENT_TYPE EXTERNAL CHARACTER 'application/octet-stream';

DECLARE UNKNOWN_CONTENT_TYPE EXTERNAL CHARACTER 'content/unknown';

/**
 * Declare error messages.
 */
 
DECLARE INVALID_REQUEST_RECEIVED EXTERNAL CHARACTER 'Invalid request received!';

DECLARE INTERNAL_ERROR_ACCEPTING_MESSAGES EXTERNAL CHARACTER 'Internal error accepting messages at this time!';

/**
 * Declare standard Queue Names, Topics, etc.
 */
 
DECLARE TLOG_IN_QUEUE EXTERNAL CHARACTER 'TLOG.IN';

DECLARE TLOG_TOPIC_BASE EXTERNAL CHARACTER 'store/tlog';
DECLARE STORE_EVENT_TOPIC_BASE EXTERNAL CHARACTER 'store/event';
DECLARE STORE_IN_TOPIC_BASE EXTERNAL CHARACTER 'store/in';

DECLARE DEFAULT_ERROR_TOPIC_TYPE EXTERNAL CHARACTER 'UNKNOWN';
DECLARE PUBLISH_ERROR_TOPIC_TYPE EXTERNAL CHARACTER 'PUBLISH';

/**
 * Define standard Store and Division attributes.
 */

DECLARE STORE_NUMBER_LEN EXTERNAL INTEGER 5;
DECLARE DIVISION_NUMBER_LEN EXTERNAL INTEGER 3;

/**
 * Define standard replacement expressions used in strings
 * such as dynamically built topic strings.
 */
 
-- TRANSACTION is specified from a fixed set based on the source and type.
DECLARE TRANSACTION_TOPIC_EXPRESSION EXTERNAL CHARACTER '${TRANSACTION}';
-- DIVISIION is specified as the 3 digit division number.
DECLARE DIVISION_TOPIC_EXPRESSION EXTERNAL CHARACTER '${DIVISION}';
-- STORE is specified as the 5 digit store number.
DECLARE STORE_TOPIC_EXPRESSION EXTERNAL CHARACTER '${STORE}';
-- TYPE is specified as EVENT or DATA.
DECLARE TYPE_TOPIC_EXPRESSION EXTERNAL CHARACTER '${TYPE}';
-- OPERATION is used to refine a topic string.
DECLARE OPERATION_TOPIC_EXPRESSION EXTERNAL CHARACTER '${OPERATION}';
-- SOURCE is specified as POS, QUEVISION, EPRN, etc.
DECLARE SOURCE_TOPIC_EXPRESSION EXTERNAL CHARACTER '${SOURCE}';
-- DESTINATION is specified as POS, QUEVISION, EPRN, etc.
DECLARE DESTINATION_TOPIC_EXPRESSION EXTERNAL CHARACTER '${DESTINATION}';
-- EVENT-PAYLOAD-TYPE typically set by the HTTP header X-Event-Payload-Type.
DECLARE EVENT_PAYLOAD_TYPE_TOPIC_EXPRESSION EXTERNAL CHARACTER '${EVENT-PAYLOAD-TYPE}';
-- EVENT-TYPE typically set by the HTTP header X-Event-Type.
DECLARE EVENT_TYPE_TOPIC_EXPRESSION EXTERNAL CHARACTER '${EVENT-TYPE}';
-- EVENT-NAME typically set by the HTTP header X-Event-Name.
DECLARE EVENT_NAME_TOPIC_EXPRESSION EXTERNAL CHARACTER '${EVENT-NAME}';
-- TRANSFER-NAME typically set as TranferName in an FTE transfer.
DECLARE TRANSFER_NAME_TOPIC_EXPRESSION EXTERNAL CHARACTER '${TRANSFER-NAME}';
-- JOB-NAME typically set as JobName in an FTE transfer.
DECLARE JOB_NAME_TOPIC_EXPRESSION EXTERNAL CHARACTER '${JOB-NAME}';
-- NAME identifies a system, endpoint, etc.
DECLARE NAME_TOPIC_EXPRESSION EXTERNAL CHARACTER '${NAME}';
-- INSTANCE_ID identifies an instance or specific entity in a topic string.
DECLARE INSTANCE_ID_TOPIC_EXPRESSION EXTERNAL CHARACTER '${INSTANCE_ID}';
-- CORRELATION_ID identifies the correlation Id in a topic string.
DECLARE CORRELATION_ID_TOPIC_EXPRESSION EXTERNAL CHARACTER '${CORRELATION_ID}';
-- RESOURCE expression typically used in dynamic URL construction.
DECLARE RESOURCE_EXPRESSION EXTERNAL CHARACTER '${RESOURCE}';
-- UPC expression
DECLARE UPC_EXPRESSION EXTERNAL CHARACTER '${UPC}';
-- Date expression
DECLARE DATE_EXPRESSION EXTERNAL CHARACTER '${DATE}';
-- Time expression
DECLARE TIME_EXPRESSION EXTERNAL CHARACTER '${TIME}';
-- Defines the ERROR sub topic.
DECLARE ERROR_SUB_TOPIC EXTERNAL CHARACTER 'ERROR';



/**
 * Standard StoreError Error Property Names.
 */
 
DECLARE ERROR_PROPERTY EXTERNAL CHARACTER 'Error';
DECLARE ERROR_REQUEST_TYPE_PROPERTY EXTERNAL CHARACTER 'RequestType';
DECLARE ERROR_REQUEST_PROPERTY EXTERNAL CHARACTER 'Request';
DECLARE ERROR_OPERATION_PROPERTY EXTERNAL CHARACTER 'Operation';
DECLARE ERROR_SERVICE_PROPERTY EXTERNAL CHARACTER 'Service';
DECLARE ERROR_COMMAND_PROPERTY EXTERNAL CHARACTER 'Command';


CREATE PROCEDURE getUTF8_CCSID() RETURNS INTEGER
BEGIN
 RETURN UTF8_CCSID;
END;

CREATE PROCEDURE getUNKNOWN_HOST() RETURNS CHARACTER
BEGIN
 RETURN UNKNOWN_HOST;
END;


CREATE PROCEDURE getXML_CONTENT_TYPE() RETURNS CHARACTER
BEGIN
 RETURN XML_CONTENT_TYPE;
END;


CREATE PROCEDURE getXML_TEXT_CONTENT_TYPE() RETURNS CHARACTER
BEGIN
 RETURN XML_TEXT_CONTENT_TYPE;
END;



CREATE PROCEDURE getTEXT_CONTENT_TYPE() RETURNS CHARACTER
BEGIN
 RETURN TEXT_CONTENT_TYPE;
END;


CREATE PROCEDURE getHTML_CONTENT_TYPE() RETURNS CHARACTER
BEGIN
 RETURN HTML_CONTENT_TYPE;
END;


CREATE PROCEDURE getAPPLICATION_FORM_URLENCODED_CONTENT_TYPE() RETURNS CHARACTER
BEGIN
 RETURN APPLICATION_FORM_URLENCODED_CONTENT_TYPE;
END;


CREATE PROCEDURE getAPPLICATION_OCTET_STREAM_CONTENT_TYPE() RETURNS CHARACTER
BEGIN
 RETURN APPLICATION_OCTET_STREAM_CONTENT_TYPE;
END;



CREATE PROCEDURE getUNKNOWN_CONTENT_TYPE() RETURNS CHARACTER
BEGIN
 RETURN UNKNOWN_CONTENT_TYPE;
END;


CREATE PROCEDURE getINVALID_REQUEST_RECEIVED() RETURNS CHARACTER
BEGIN
 RETURN INVALID_REQUEST_RECEIVED;
END;



CREATE PROCEDURE getINTERNAL_ERROR_ACCEPTING_MESSAGES() RETURNS CHARACTER
BEGIN
 RETURN INTERNAL_ERROR_ACCEPTING_MESSAGES;
END;



CREATE PROCEDURE getTLOG_IN_QUEUE() RETURNS CHARACTER
BEGIN
 RETURN TLOG_IN_QUEUE;
END;



CREATE PROCEDURE getTLOG_TOPIC_BASE() RETURNS CHARACTER
BEGIN
 RETURN TLOG_TOPIC_BASE;
END;


CREATE PROCEDURE getSTORE_EVENT_TOPIC_BASE() RETURNS CHARACTER
BEGIN
 RETURN STORE_EVENT_TOPIC_BASE;
END;


CREATE PROCEDURE getSTORE_IN_TOPIC_BASE() RETURNS CHARACTER
BEGIN
 RETURN STORE_IN_TOPIC_BASE;
END;




CREATE PROCEDURE getDEFAULT_ERROR_TOPIC_TYPE() RETURNS CHARACTER
BEGIN
 RETURN DEFAULT_ERROR_TOPIC_TYPE;
END;


CREATE PROCEDURE getPUBLISH_ERROR_TOPIC_TYPE() RETURNS CHARACTER
BEGIN
 RETURN PUBLISH_ERROR_TOPIC_TYPE;
END;



CREATE PROCEDURE getSTORE_NUMBER_LEN() RETURNS INTEGER
BEGIN
 RETURN STORE_NUMBER_LEN;
END;


CREATE PROCEDURE getDIVISION_NUMBER_LEN() RETURNS INTEGER
BEGIN
 RETURN DIVISION_NUMBER_LEN;
END;




CREATE PROCEDURE getTRANSACTION_TOPIC_EXPRESSION() RETURNS CHARACTER
BEGIN
 RETURN TRANSACTION_TOPIC_EXPRESSION;
END;



CREATE PROCEDURE getDIVISION_TOPIC_EXPRESSION() RETURNS CHARACTER
BEGIN
 RETURN DIVISION_TOPIC_EXPRESSION;
END;



CREATE PROCEDURE getSTORE_TOPIC_EXPRESSION() RETURNS CHARACTER
BEGIN
 RETURN STORE_TOPIC_EXPRESSION;
END;



CREATE PROCEDURE getTYPE_TOPIC_EXPRESSION() RETURNS CHARACTER
BEGIN
 RETURN TYPE_TOPIC_EXPRESSION;
END;



CREATE PROCEDURE getOPERATION_TOPIC_EXPRESSION() RETURNS CHARACTER
BEGIN
 RETURN OPERATION_TOPIC_EXPRESSION;
END;



CREATE PROCEDURE getSOURCE_TOPIC_EXPRESSION() RETURNS CHARACTER
BEGIN
 RETURN SOURCE_TOPIC_EXPRESSION;
END;



CREATE PROCEDURE getDESTINATION_TOPIC_EXPRESSION() RETURNS CHARACTER
BEGIN
 RETURN DESTINATION_TOPIC_EXPRESSION;
END;



CREATE PROCEDURE getEVENT_PAYLOAD_TYPE_TOPIC_EXPRESSION() RETURNS CHARACTER
BEGIN
 RETURN EVENT_PAYLOAD_TYPE_TOPIC_EXPRESSION;
END;



CREATE PROCEDURE getEVENT_TYPE_TOPIC_EXPRESSION() RETURNS CHARACTER
BEGIN
 RETURN EVENT_TYPE_TOPIC_EXPRESSION;
END;



CREATE PROCEDURE getEVENT_NAME_TOPIC_EXPRESSION() RETURNS CHARACTER
BEGIN
 RETURN EVENT_NAME_TOPIC_EXPRESSION;
END;



CREATE PROCEDURE getTRANSFER_NAME_TOPIC_EXPRESSION() RETURNS CHARACTER
BEGIN
 RETURN TRANSFER_NAME_TOPIC_EXPRESSION;
END;



CREATE PROCEDURE getJOB_NAME_TOPIC_EXPRESSION() RETURNS CHARACTER
BEGIN
 RETURN JOB_NAME_TOPIC_EXPRESSION;
END;



CREATE PROCEDURE getNAME_TOPIC_EXPRESSION() RETURNS CHARACTER
BEGIN
 RETURN NAME_TOPIC_EXPRESSION;
END;



CREATE PROCEDURE getINSTANCE_ID_TOPIC_EXPRESSION() RETURNS CHARACTER
BEGIN
 RETURN INSTANCE_ID_TOPIC_EXPRESSION;
END;



CREATE PROCEDURE getCORRELATION_ID_TOPIC_EXPRESSION() RETURNS CHARACTER
BEGIN
 RETURN CORRELATION_ID_TOPIC_EXPRESSION;
END;



CREATE PROCEDURE getRESOURCE_EXPRESSION() RETURNS CHARACTER
BEGIN
 RETURN RESOURCE_EXPRESSION;
END;



CREATE PROCEDURE getUPC_EXPRESSION() RETURNS CHARACTER
BEGIN
 RETURN UPC_EXPRESSION;
END;

CREATE PROCEDURE getDATE_EXPRESSION() RETURNS CHARACTER
BEGIN
 RETURN DATE_EXPRESSION;
END;

CREATE PROCEDURE getTIME_EXPRESSION() RETURNS CHARACTER
BEGIN
 RETURN TIME_EXPRESSION;
END;


CREATE PROCEDURE getERROR_SUB_TOPIC() RETURNS CHARACTER
BEGIN
 RETURN ERROR_SUB_TOPIC;
END;


CREATE PROCEDURE getERROR_PROPERTY() RETURNS CHARACTER
BEGIN
 RETURN ERROR_PROPERTY;
END;


CREATE PROCEDURE getERROR_REQUEST_TYPE_PROPERTY() RETURNS CHARACTER
BEGIN
 RETURN ERROR_REQUEST_TYPE_PROPERTY;
END;


CREATE PROCEDURE getERROR_REQUEST_PROPERTY() RETURNS CHARACTER
BEGIN
 RETURN ERROR_REQUEST_PROPERTY;
END;


CREATE PROCEDURE getERROR_OPERATION_PROPERTY() RETURNS CHARACTER
BEGIN
 RETURN ERROR_OPERATION_PROPERTY;
END;


CREATE PROCEDURE getERROR_SERVICE_PROPERTY() RETURNS CHARACTER
BEGIN
 RETURN ERROR_SERVICE_PROPERTY;
END;


CREATE PROCEDURE getERROR_COMMAND_PROPERTY() RETURNS CHARACTER
BEGIN
 RETURN ERROR_COMMAND_PROPERTY;
END;